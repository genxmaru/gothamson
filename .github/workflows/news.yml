name: News Flow Automation

on:
  schedule:
    - cron: '0 * * * *'    # 毎時0分にフェッチ＆ログ追記
    - cron: '0 0 * * *'    # 毎日0時（UTC）に日次サマリーを実行
    # - cron: '0 0 * * 1'    # 毎週月曜0時（UTC）に週次サマリーを実行 (必要ならコメントアウトを外す)
    # - cron: '0 0 1 * *'    # 毎月1日0時（UTC）に月次サマリーを実行 (必要ならコメントアウトを外す)
  workflow_dispatch: # 手動実行も可能

permissions:
  contents: write # リポジトリへの書き込み権限（ログファイル、DB、処理済み記事ログ用）

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # コミット権限用
          persist-credentials: true
          fetch-depth: 0 # 全履歴をフェッチ
          ref: ${{ github.ref }} # 現在のブランチを明示的にチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip feedparser

      - name: Fetch & Log Keywords
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          python news_fetcher.py # カレントディレクトリがルートなので、ファイル名だけでOK
      
      - name: Commit Hourly Logs and Processed Articles
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/hourly_keyword_counts.jsonl data/processed_articles.json
          git commit -m "chore: update hourly keyword counts and processed articles log" || echo "No changes to commit"
          git push origin main

  summarize_and_notify:
    needs: fetch # fetchジョブが完了してから実行
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.schedule == '0 0 * * *') }}
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }} # Discord Webhook URLをシークレットから取得
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # 全履歴をフェッチ
          ref: ${{ github.ref }} # 現在のブランチを明示的にチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv & Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip

      - name: Initialize Database (if not exists)
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          python db_manager.py

      # ★★★ここからデバッグステップを追加★★★
      - name: Debug: Check current directory and files
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing files in current directory:"
          ls -F
          echo "Listing files in ${{ github.workspace }}:"
          ls -F "${{ github.workspace }}"
          echo "Checking if summarizer.py exists in current directory:"
          test -f summarizer.py && echo "summarizer.py exists in current directory." || echo "summarizer.py NOT found in current directory."
          echo "Checking if summarizer.py exists in GITHUB_WORKSPACE:"
          test -f "${{ github.workspace }}/summarizer.py" && echo "summarizer.py exists in GITHUB_WORKSPACE." || echo "summarizer.py NOT found in GITHUB_WORKSPACE."
          echo "Path of summarizer.py: $(realpath summarizer.py 2>/dev/null || echo 'Not found')"
      # ★★★デバッグステップここまで★★★

      - name: Run Summarizer and Get Report
        id: run_summarizer
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          python summarizer.py > summary_report.txt
          echo "summary_report<<EOF" >> $GITHUB_OUTPUT
          cat summary_report.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Notify Discord Summary
        if: success() && steps.run_summarizer.outputs.summary_report != ''
        run: |
          content="${{ steps.run_summarizer.outputs.summary_report }}"
          payload=$(jq -Rn --arg c "$content" '{content: $c}')
          curl -H "Content-Type: application/json" \
               -d "$payload" \
               "$DISCORD_WEBHOOK_URL"
      
      - name: Commit Summary and Database Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/keyword_trends.db
          git commit -m "chore: update daily keyword trends DB" || echo "No changes to commit"
          git push origin main
