name: News Flow Automation

on:
  schedule:
    - cron: '0 * * * *'    # 毎時0分にフェッチ＆ログ追記
    - cron: '0 0 * * *'    # 毎日0時（UTC）に日次サマリーを実行
    # - cron: '0 0 * * 1'    # 毎週月曜0時（UTC）に週次サマリーを実行 (必要ならコメントアウトを外す)
    # - cron: '0 0 1 * *'    # 毎月1日0時（UTC）に月次サマリーを実行 (必要ならコメントアウトを外す)
  workflow_dispatch: # 手動実行も可能

permissions:
  contents: write # リポジトリへの書き込み権限（ログファイル、DB、処理済み記事ログ用）

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # コミット権限用
          persist-credentials: true
          fetch-depth: 0 # 全履歴をフェッチ
          ref: ${{ github.ref }} # 現在のブランチを明示的にチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate # ここは source .venv/bin/activate が一般的です
          pip install --upgrade pip
          pip install -r requirements.txt # requirements.txtから依存関係をインストール

      - name: Fetch & Log Keywords
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          python news_fetcher.py # カレントディレクトリがルートなので、ファイル名だけでOK
      
      - name: Commit Hourly Logs and Processed Articles
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/hourly_keyword_counts.jsonl data/processed_articles.json
          git commit -m "chore: update hourly keyword counts and processed articles log" || echo "No changes to commit"
          git push origin main

  summarize_and_notify:
    needs: fetch # fetchジョブが完了してから実行
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.schedule == '0 0 * * *') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # 全履歴をフェッチ
          ref: ${{ github.ref }} # 現在のブランチを明示的にチェックアウト

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv & Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          # 日本語フォントをインストール
          sudo apt-get update
          sudo apt-get install -y fonts-ipafont-gothic
          # 必要に応じてフォントキャッシュを更新 (通常は不要だが念のため)
          sudo fc-cache -fv

      - name: Initialize Database (if not exists)
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          PYTHONPATH="${{ github.workspace }}" python db_manager.py

      - name: Run Summarizer and Get Report
        id: run_summarizer
        run: |
          cd "${{ github.workspace }}" # リポジトリのルートディレクトリに移動
          source .venv/bin/activate
          echo "full_summary_output<<EOF" >> $GITHUB_OUTPUT # 出力名を変更
          PYTHONPATH="${{ github.workspace }}" python summarize.py >> $GITHUB_OUTPUT # summarize.pyの出力を直接書き込む
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Notify Discord 24H Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---24H')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_24H }} # 24H用Webhook
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          # 24Hトレンド部分を抽出
          content_24h=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---24H/,/---REPORT_SPLIT---1MON/p' | sed '1d;$d')
          
          # Discordメッセージの文字数制限 (2000文字) を考慮し、必要に応じてトリミング
          if [ $(echo -n "$content_24h" | wc -c) -gt 1990 ]; then
            echo "Warning: 24H report content exceeds 2000 characters. Trimming..."
            content_24h=$(echo "$content_24h" | cut -c 1-1990)"..."
          fi

          if [ -n "$content_24h" ]; then # 内容が空でない場合のみ送信
            payload=$(jq -Rn --arg c "$content_24h" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "$DISCORD_WEBHOOK_URL"
          else
            echo "24H trends report is empty, skipping Discord notification."
          fi

      - name: Notify Discord 1MON Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---1MON')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_1MON }} # 1MON用Webhook
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          # 1MONトレンド部分を抽出
          content_1m=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---1MON/,/---REPORT_SPLIT---3MON/p' | sed '1d;$d')

          if [ $(echo -n "$content_1m" | wc -c) -gt 1990 ]; then
            echo "Warning: 1MON report content exceeds 2000 characters. Trimming..."
            content_1m=$(echo "$content_1m" | cut -c 1-1990)"..."
          fi

          if [ -n "$content_1m" ]; then # 内容が空でない場合のみ送信
            payload=$(jq -Rn --arg c "$content_1m" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "$DISCORD_WEBHOOK_URL"
          else
            echo "1MON trends report is empty, skipping Discord notification."
          fi

      - name: Notify Discord 3MON Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---3MON')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_3MON }} # 3MON用Webhook
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          # 3MONトレンド部分を抽出
          # 最終セクションなので、最後のSPLITマーカーからEOFまで
          content_3m=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---3MON/,$p' | sed '1d')

          if [ $(echo -n "$content_3m" | wc -c) -gt 1990 ]; then
            echo "Warning: 3MON report content exceeds 2000 characters. Trimming..."
            content_3m=$(echo "$content_3m" | cut -c 1-1990)"..."
          fi

          if [ -n "$content_3m" ]; then # 内容が空でない場合のみ送信
            payload=$(jq -Rn --arg c "$content_3m" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "$DISCORD_WEBHOOK_URL"
          else
            echo "3MON trends report is empty, skipping Discord notification."
          fi
      
      - name: Generate Word Clouds
        run: |
          cd "${{ github.workspace }}"
          source .venv/bin/activate
          # ワードクラウドの出力ディレクトリを作成
          mkdir -p data/wordclouds
          PYTHONPATH="${{ github.workspace }}" python generate_wordclouds.py
      
      - name: Commit Word Clouds
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/wordclouds/*.png
          git commit -m "chore: add generated word cloud images" || echo "No new word cloud images to commit"
          git push origin main
      
      - name: Get Word Cloud URLs and Notify Discord
        if: success()
        run: |
          # GitHubにプッシュされた画像のURLを構築
          # リポジトリ名とブランチ名を取得
          REPO_NAME="${{ github.repository }}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          # wordcloudsディレクトリ内のすべてのPNG画像を検索
          IMAGE_PATHS=$(find data/wordclouds -name "*.png")
          
          # 各画像のDiscord通知メッセージを構築
          DISCORD_MESSAGE=""
          for IMAGE_PATH in $IMAGE_PATHS; do
            IMAGE_BASENAME=$(basename "$IMAGE_PATH")
            # GitHub rawコンテンツのURLを構築
            IMAGE_URL="https://raw.githubusercontent.com/$REPO_NAME/$BRANCH_NAME/$IMAGE_PATH"
            # ファイル名を整形してタイトルにする（例: wordcloud_24h_total_20240527.png -> 24時間トレンド 全体 20240527）
            TITLE_FORMATTED=$(echo "$IMAGE_BASENAME" | sed 's/wordcloud_//' | sed 's/\.png//' | sed 's/_/\ /g' | sed 's/24h/24時間トレンド/g' | sed 's/1m/1ヶ月トレンド/g' | sed 's/3m/3ヶ月トレンド/g' | sed 's/bitcoin.com news/Bitcoin.com News/g' | sed 's/cointelegraph/Cointelegraph/g' | sed 's/cryptonews/CryptoNews/g' | sed 's/decrypt/Decrypt/g' | sed 's/total/全体/g' | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1年\2月\3日/g')
            
            DISCORD_MESSAGE+="## ワードクラウドレポート: $TITLE_FORMATTED\n"
            DISCORD_MESSAGE+="$IMAGE_URL\n\n"
          done
          
          # Discordメッセージの文字数制限 (2000文字) を考慮し、必要に応じてトリミング
          if [ $(echo -n "$DISCORD_MESSAGE" | wc -c) -gt 1990 ]; then
            echo "Warning: Discord image report content exceeds 2000 characters. Trimming..."
            DISCORD_MESSAGE=$(echo "$DISCORD_MESSAGE" | cut -c 1-1990)"..."
          fi

          if [ -n "$DISCORD_MESSAGE" ]; then
            # Discord Webhook URLは、この通知専用のものを定義するか、既存のものを再利用
            # ここでは新しいシークレット DISCORD_WEBHOOK_URL_WORDCLOUDS を推奨
            payload=$(jq -Rn --arg c "$DISCORD_MESSAGE" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "${{ secrets.DISCORD_WEBHOOK_URL_WORDCLOUDS }}" # 新しいWebhook URL
          else
            echo "No word cloud images generated, skipping Discord notification."
          fi
      
      - name: Commit Summary and Database Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/keyword_trends.db
          git commit -m "chore: update daily keyword trends DB" || echo "No changes to commit"
          git push origin main
