name: News Flow Automation
on:
  schedule:
    - cron: '0 * * * *'    # 毎時0分にフェッチ＆ログ追記
    - cron: '0 0 * * *'    # 毎日0時（UTC）に日次サマリーを実行
  workflow_dispatch: # 手動実行も可能
permissions:
  contents: write # リポジトリへの書き込み権限（ログファイル、DB、処理済み記事ログ用）
jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install MeCab system libraries and alternative dictionary
        run: |
          sudo apt-get update
          echo "--- Purging existing MeCab ipadic/jumandic packages ---"
          sudo apt-get purge -y mecab libmecab-dev mecab-ipadic mecab-ipadic-utf8 mecab-utils mecab-jumandic mecab-jumandic-utf8
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo "--- Finished purging MeCab packages ---"

          echo "--- Installing MeCab and dictionary (trying naist-jdic or jumandic-utf8) ---"
          sudo apt-get install -y mecab libmecab-dev mecab-utils
          if sudo apt-get install -y mecab-naist-jdic; then
            echo "mecab-naist-jdic (and -eucjp) installed."
            MECAB_DIC_PATH_SRC="/usr/share/mecab/dic/naist-jdic-eucjp"
            MECAB_ENCODING_SRC="euc-jp"
          elif sudo apt-get install -y mecab-jumandic-utf8; then
            echo "mecab-jumandic-utf8 installed."
            MECAB_DIC_PATH_SRC="/usr/share/mecab/dic/juman"
            MECAB_ENCODING_SRC="utf-8"
          else
            echo "Error: Could not install a suitable MeCab dictionary (naist-jdic or jumandic-utf8)."
            exit 1
          fi
          echo "--- Finished installing MeCab and dictionary ---"
          echo "Using source dictionary from: $MECAB_DIC_PATH_SRC with encoding $MECAB_ENCODING_SRC"

          MECAB_DIC_PATH_COMPILED_UTF8="/usr/local/share/mecab-dic-compiled-utf8"
          sudo mkdir -p "$MECAB_DIC_PATH_COMPILED_UTF8"
          sudo chown -R runner:runner "$MECAB_DIC_PATH_COMPILED_UTF8"

          DICRC_PATH_COMPILED="$MECAB_DIC_PATH_COMPILED_UTF8/dicrc"

          echo "--- Listing files in source dictionary directory ($MECAB_DIC_PATH_SRC) ---"
          if [ -d "$MECAB_DIC_PATH_SRC" ]; then
            ls -la "$MECAB_DIC_PATH_SRC"
          else
            echo "Source dictionary directory $MECAB_DIC_PATH_SRC NOT FOUND! Please check the path."
            exit 1
          fi
          echo "-----------------------------------------------------------------------------"

          echo "--- Attempting to compile dictionary to UTF-8 at $MECAB_DIC_PATH_COMPILED_UTF8 ---"
          MECAB_LIBEXEC_DIR=$(mecab-config --libexecdir)
          echo "MeCab libexec directory: $MECAB_LIBEXEC_DIR"

          if sudo "$MECAB_LIBEXEC_DIR/mecab-dict-index" \
            -d "$MECAB_DIC_PATH_SRC" \
            -o "$MECAB_DIC_PATH_COMPILED_UTF8" \
            -f "$MECAB_ENCODING_SRC" \
            -t utf-8; then
            echo "mecab-dict-index completed successfully to $MECAB_DIC_PATH_COMPILED_UTF8."
            echo "--- Updating dicrc in compiled directory ---"
            if [ -f "$MECAB_DIC_PATH_SRC/dicrc" ]; then
              echo "Source dicrc found at $MECAB_DIC_PATH_SRC/dicrc. Copying and updating..."
              sudo cp "$MECAB_DIC_PATH_SRC/dicrc" "$DICRC_PATH_COMPILED"
              if grep -q '^dicdir\s*=' "$DICRC_PATH_COMPILED"; then
                sudo sed -i "s|^dicdir\s*=.*$|dicdir = $MECAB_DIC_PATH_COMPILED_UTF8|" "$DICRC_PATH_COMPILED"
              else
                echo "dicdir = $MECAB_DIC_PATH_COMPILED_UTF8" | sudo cat - "$DICRC_PATH_COMPILED" > temp_dicrc && sudo mv temp_dicrc "$DICRC_PATH_COMPILED"
              fi
              if grep -q '^charset\s*=' "$DICRC_PATH_COMPILED"; then
                sudo sed -i 's/^charset\s*=.*$/charset = utf-8/' "$DICRC_PATH_COMPILED"
              else
                echo "charset = utf-8" | sudo tee -a "$DICRC_PATH_COMPILED" > /dev/null
              fi
              echo "Dicrc updated. Content of new dicrc ($DICRC_PATH_COMPILED):"
              sudo cat "$DICRC_PATH_COMPILED"
            else
              echo "Warning: Source dicrc ($MECAB_DIC_PATH_SRC/dicrc) not found. Creating minimal dicrc."
              echo "dicdir = $MECAB_DIC_PATH_COMPILED_UTF8" | sudo tee "$DICRC_PATH_COMPILED" > /dev/null
              echo "charset = utf-8" | sudo tee -a "$DICRC_PATH_COMPILED" > /dev/null
            fi
          else
            EXIT_CODE=$?
            echo "mecab-dict-index failed with exit code: $EXIT_CODE. Check if source dictionary and encoding are correct."
            exit $EXIT_CODE
          fi
          echo "--- Dictionary compilation attempt finished ---"

          echo "--- Listing files in compiled UTF-8 dictionary directory ($MECAB_DIC_PATH_COMPILED_UTF8) ---"
          ls -la "$MECAB_DIC_PATH_COMPILED_UTF8"
          echo "---------------------------------------------------------------------------"

      - name: Create venv & Install dependencies (including mecab-python3 in venv)
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install mecab-python3
          pip install -r requirements.txt

      - name: Fetch & Log Keywords
        run: |
          cd "${{ github.workspace }}"
          source .venv/bin/activate
          python news_fetcher.py

      - name: Debug Hourly Keyword Log
        run: |
          echo "--- Debugging hourly_keyword_counts.jsonl content ---"
          if [ -f data/hourly_keyword_counts.jsonl ]; then
            head -n 5 data/hourly_keyword_counts.jsonl
            echo "..."
            tail -n 5 data/hourly_keyword_counts.jsonl
          else
            echo "data/hourly_keyword_counts.jsonl does not exist."
          fi
          echo "-----------------------------------------------------"

      - name: Commit Hourly Logs and Processed Articles
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/hourly_keyword_counts.jsonl data/processed_articles.json
          git commit -m "chore: update hourly keyword counts and processed articles log" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}

  summarize_and_notify:
    needs: fetch
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.schedule == '0 0 * * *') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv & Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y fonts-ipafont-gothic
          sudo fc-cache -fv
          echo "--- Installed fonts list (IPA Gothic check) ---"
          fc-list | grep -i ipa || echo "IPA font not found by fc-list"
          echo "--- Checking specified font path for generate_wordclouds.py ---"
          echo "Expected font path in generate_wordclouds.py: /usr/share/fonts/opentype/ipafont-gothic/ipagp.ttf"
          ls -la /usr/share/fonts/opentype/ipafont-gothic/ipagp.ttf || echo "Font at /usr/share/fonts/opentype/ipafont-gothic/ipagp.ttf NOT FOUND"
          echo "--- Alternative font path check ---"
          ls -la /usr/share/fonts/truetype/fonts-japanese-gothic.ttf || echo "Font at /usr/share/fonts/truetype/fonts-japanese-gothic.ttf NOT FOUND"
          echo "--- Listing all files in IPA Gothic directory ---"
          ls -la /usr/share/fonts/opentype/ipafont-gothic/ || echo "/usr/share/fonts/opentype/ipafont-gothic/ directory NOT FOUND"
          echo "--- End of font debug info ---"

      - name: Initialize Database (if not exists)
        run: |
          cd "${{ github.workspace }}"
          source .venv/bin/activate
          # PYTHONPATH="${{ github.workspace }}" python db_manager.py

      - name: Debug DB Content
        run: |
          echo "--- Debugging keyword_trends.db content ---"
          if [ -f data/keyword_trends.db ]; then
            sqlite3 data/keyword_trends.db ".schema"
            sqlite3 data/keyword_trends.db "SELECT * FROM daily_trends LIMIT 20;"
            sqlite3 data/keyword_trends.db "SELECT date, trend_type, source_name, COUNT(keyword) FROM daily_trends GROUP BY date, trend_type, source_name ORDER BY date DESC LIMIT 10;"
            sqlite3 data/keyword_trends.db "SELECT date, trend_type, source_name, keyword, count FROM daily_trends ORDER BY date DESC, trend_type, source_name, count DESC LIMIT 20;"
          else
            echo "data/keyword_trends.db does not exist."
          fi
          echo "-------------------------------------------"

      - name: Run Summarizer and Get Report
        id: run_summarizer
        run: |
          cd "${{ github.workspace }}"
          source .venv/bin/activate
          echo "full_summary_output<<EOF" >> $GITHUB_OUTPUT
          PYTHONPATH="${{ github.workspace }}" python summarize.py >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Discord 24H Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---24H')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_24H }}
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          content_24h=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---24H/,/---REPORT_SPLIT---1MON/p' | sed '1d;$d')
          if [ $(echo -n "$content_24h" | wc -c) -gt 1990 ]; then
            echo "Warning: 24H report content exceeds 2000 characters. Trimming..."
            content_24h=$(echo "$content_24h" | cut -c 1-1990)"..."
          fi
          if [ -n "$content_24h" ]; then
            payload=$(jq -Rn --arg c "$content_24h" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "$DISCORD_WEBHOOK_URL"
          else
            echo "24H trends report is empty, skipping Discord notification."
          fi

      - name: Notify Discord 1MON Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---1MON')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_1MON }}
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          content_1m=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---1MON/,/---REPORT_SPLIT---3MON/p' | sed '1d;$d')
          if [ $(echo -n "$content_1m" | wc -c) -gt 1990 ]; then
            echo "Warning: 1MON report content exceeds 2000 characters. Trimming..."
            content_1m=$(echo "$content_1m" | cut -c 1-1990)"..."
          fi
          if [ -n "$content_1m" ]; then
            payload=$(jq -Rn --arg c "$content_1m" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "$DISCORD_WEBHOOK_URL"
          else
            echo "1MON trends report is empty, skipping Discord notification."
          fi

      - name: Notify Discord 3MON Trends
        if: success() && contains(steps.run_summarizer.outputs.full_summary_output, '---REPORT_SPLIT---3MON')
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_3MON }}
        run: |
          full_output="${{ steps.run_summarizer.outputs.full_summary_output }}"
          content_3m=$(echo "$full_output" | sed -n '/---REPORT_SPLIT---3MON/,$p' | sed '1d')
          if [ $(echo -n "$content_3m" | wc -c) -gt 1990 ]; then
            echo "Warning: 3MON report content exceeds 2000 characters. Trimming..."
            content_3m=$(echo "$content_3m" | cut -c 1-1990)"..."
          fi
          if [ -n "$content_3m" ]; then
            payload=$(jq -Rn --arg c "$content_3m" '{content: $c}')
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "${{ secrets.DISCORD_WEBHOOK_URL_3MON }}"
          else
            echo "3MON trends report is empty, skipping Discord notification."
          fi

      - name: Generate Word Clouds
        run: |
          cd "${{ github.workspace }}"
          source .venv/bin/activate
          mkdir -p data/wordclouds
          PYTHONPATH="${{ github.workspace }}" python generate_wordclouds.py

      - name: Commit Word Clouds
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/wordclouds/*.png
          git commit -m "chore: add generated word cloud images" || echo "No new word cloud images to commit"
          git push origin ${{ github.ref_name }}

      - name: Get Word Cloud URLs and Notify Discord # ★★★ ここから修正 ★★★
        if: success()
        run: |
          # GitHub PagesのURLをベースにする (例: https://ユーザー名.github.io/リポジトリ名/)
          # もきしゅさんの場合、 USER_NAME は genxmaru, REPO_NAME_ONLY は gothamson
          # これらは secrets や環境変数から取得するか、ハードコードも可能
          # GITHUB_REPOSITORY は owner/repo の形式なので分割する
          USER_NAME="${{ github.repository_owner }}"
          REPO_NAME_ONLY=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # GitHub Pagesが有効化されているリポジトリのルートからのパスを指定
          # (例: /data/wordclouds/画像ファイル名.png)
          # news.yml で main ブランチの /(root) をソースにしているので、パスはそのまま
          BASE_URL="https://$USER_NAME.github.io/$REPO_NAME_ONLY"

          echo "Base URL for GitHub Pages: $BASE_URL"
          
          IMAGE_PATHS=$(find data/wordclouds -name "*.png")
          if [ -z "$IMAGE_PATHS" ]; then
            echo "No PNG files found in data/wordclouds. Skipping Discord notification for word clouds."
            exit 0
          fi
          
          DISCORD_MESSAGE=""
          for IMAGE_PATH in $IMAGE_PATHS; do
            IMAGE_BASENAME=$(basename "$IMAGE_PATH")
            # GitHub PagesのURLを構築
            IMAGE_URL="$BASE_URL/$IMAGE_PATH" # IMAGE_PATH は data/wordclouds/xxx.png 形式
            
            # タイトル整形 (ここは元のままでOK)
            TITLE_FORMATTED=$(echo "$IMAGE_BASENAME" | sed 's/wordcloud_//' | sed 's/\.png//' | sed 's/_/\ /g' | sed 's/24h/24時間トレンド/g' | sed 's/1m/1ヶ月トレンド/g' | sed 's/3m/3ヶ月トレンド/g' | sed 's/bitcoin.com news/Bitcoin.com News/g' | sed 's/cointelegraph/Cointelegraph/g' | sed 's/cryptonews/CryptoNews/g' | sed 's/decrypt/Decrypt/g' | sed 's/total/全体/g' | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1年\2月\3日/g')
            
            DISCORD_MESSAGE+="## ワードクラウドレポート: $TITLE_FORMATTED\n"
            DISCORD_MESSAGE+="$IMAGE_URL\n\n"
          done
          
          if [ $(echo -n "$DISCORD_MESSAGE" | wc -c) -gt 1990 ]; then
            echo "Warning: Discord image report content exceeds 2000 characters. Trimming..."
            DISCORD_MESSAGE=$(echo "$DISCORD_MESSAGE" | cut -c 1-1990)"..."
          fi

          if [ -n "$DISCORD_MESSAGE" ]; then
            # Webhook URLが空でないか確認
            if [ -z "${{ secrets.DISCORD_WEBHOOK_URL_WORDCLOUDS }}" ]; then
              echo "Error: DISCORD_WEBHOOK_URL_WORDCLOUDS is not set. Skipping notification."
              exit 1 # または exit 0 で警告のみにする
            fi
            payload=$(jq -Rn --arg c "$DISCORD_MESSAGE" '{content: $c}')
            echo "Sending Word Cloud report to Discord..."
            curl -H "Content-Type: application/json" \
                 -d "$payload" \
                 "${{ secrets.DISCORD_WEBHOOK_URL_WORDCLOUDS }}"
            echo "Word Cloud report sent."
          else
            echo "No word cloud images processed for Discord notification."
          fi
        # ★★★ ここまで修正 ★★★

      - name: Commit Summary and Database Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add data/keyword_trends.db
          git commit -m "chore: update daily keyword trends DB" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}
